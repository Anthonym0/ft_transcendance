"""
Django settings for server project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
import environ


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
env = environ.Env()
env.read_env(os.path.join(BASE_DIR, ".env"), overwrite=True)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-25q4od8wsz6ahzbe*@q^2nwc&dpul-i0lnvafvlmxyqv-q_3-!"

REDIS_HOST = 'redis'
REDIS_PORT = 6379
REDIS_DB = 0

# SECURITY WARNING: don't run with debug turned on in production!

DJANGO_ENV = env("DJANGO_ENV", default="DEV")

if DJANGO_ENV == "DEV":
    DEBUG = True
else:
    DEBUG = False

IP_WEB = env("ALLOWED_IP")
IP_WEB_CASE_HOST = env("ALLOWED_IP_HOST_CASE_VM")

print(f"ALLOWED_IP: {IP_WEB}")

ALLOWED_HOSTS = [
    "127.0.0.1",
    "localhost",
    "0.0.0.0",
    "localhost:8000",
    "daphne:8001",
    f"{IP_WEB}",
    f"{IP_WEB_CASE_HOST}",
]

# Cors settings

CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True

PORT_NGINX_HTTP = env("PORT_NGINX_HTTP", default="8000")
PORT_NGINX_HTTPS = env("PORT_NGINX_HTTPS", default="443")

CORS_ALLOWED_ORIGINS = [
    f"http://localhost:{PORT_NGINX_HTTP}",
    f"http://127.0.0.1:{PORT_NGINX_HTTP}",
    f"https://localhost:{PORT_NGINX_HTTPS}",
    f"https://127.0.0.1:{PORT_NGINX_HTTPS}",
    f"https://127.0.0.1:443",
    "https://localhost:443",
     "https://10.12.2.10:18443",
    f"https://{IP_WEB}:{PORT_NGINX_HTTP}",
    f"https://{IP_WEB}:{PORT_NGINX_HTTPS}",
    f"https://{IP_WEB_CASE_HOST}:{PORT_NGINX_HTTP}",
    f"https://{IP_WEB_CASE_HOST}:{PORT_NGINX_HTTPS}",
]


CSRF_TRUSTED_ORIGINS = [
    f"https://localhost:{PORT_NGINX_HTTPS}",
    f"https://127.0.0.1:{PORT_NGINX_HTTPS}",
    f"http://{IP_WEB}:{PORT_NGINX_HTTP}",
    f"https://{IP_WEB}:{PORT_NGINX_HTTPS}",
    f"http://{IP_WEB_CASE_HOST}:{PORT_NGINX_HTTP}",
    f"https://{IP_WEB_CASE_HOST}:{PORT_NGINX_HTTPS}",
    "https://127.0.0.1",
    f"https://127.0.0.1:443",
    "https://localhost",
    "https://localhost:443",
]

# Application definition

INSTALLED_APPS = [
    'corsheaders',
    'channels',
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    'daphne',
    "django.contrib.staticfiles",
    'server',
    'accounts',
    'pong',
    'livechat',
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "server.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "server.wsgi.application"
ASGI_APPLICATION = 'server.asgi.application'

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.sqlite3",
#         "NAME": BASE_DIR / "db.sqlite3",
#     }
# }

try:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': env("POSTGRES_DB"),
            'USER': env("POSTGRES_USER"),
            'PASSWORD': env("POSTGRES_PASSWORD"),
            'HOST': "postgres",
            'PORT': "5432",
        }
    }
    LENGTH_OF_STATE = env("LENGTH_OF_STATE")
    OAUTH42_USER_INFO_URL = env("OAUTH42_USER_INFO_URL")
    OAUTH42_AUTHORIZE_URL = env("OAUTH42_AUTHORIZE_URL")
    OAUTH42_TOKEN_URL = env("OAUTH42_TOKEN_URL")
    OAUTH42_UID = env("OAUTH42_UID")
    OAUTH42_SECRET = env("OAUTH42_SECRET")
except environ.ImproperlyConfigured as e:
    print(f"Error : {e}. Verify the file .env.")
    exit(1)

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Europe/Paris"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),]

STATIC_URL = "static/"
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
if not os.path.exists(MEDIA_ROOT):
    os.makedirs(MEDIA_ROOT)



# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# Channel settings

# CHANNEL_LAYERS = {
#     "default": {
#         "BACKEND": "channels_redis.core.RedisChannelLayer",
#         "CONFIG": {
#             "hosts": [("redis", 6379)],
#             # "health_check_interval": 10, 
#             # "capacity": 10000,
#             # "expiry": 10, 
#         },
#     },
# }


# Configuration de la gestion des sessions avec Redis
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [("redis", 6379)],
            "capacity" : 1000,
            # "symmetric_encryption_keys": [SECRET_KEY],
        },
    },
}


# Configuration du cache avec django-redis (optimisé pour Django)
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": "redis://redis:6379/1",  # Redis doit tourner sur ce host et port
 
    }
}

AUTH_USER_MODEL = 'accounts.TranscendanceUser'

# CHANNEL_LAYERS = {
#     "default": {
#         "BACKEND": "channels_redis.core.RedisChannelLayer",
#         "CONFIG": {
#             "hosts": [("redis", 6379)],
#             "suppress_background_tasks": True  # Ajoute cette ligne pour éviter des erreurs
#         },
#     },
# }


SESSION_COOKIE_SECURE = True  
SESSION_COOKIE_HTTPONLY = True  
SESSION_COOKIE_SAMESITE = 'Lax' 
# CSRF_COOKIE_SECURE = True 

# Logging

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'json': {
            '()': 'pythonjsonlogger.jsonlogger.JsonFormatter',
            'format': '%(asctime)s %(levelname)s %(name)s %(message)s',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'json',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'daphne': {
            'handlers': ['console'],
            'level': 'WARNING',
            'propagate': False,
        },
        'channels': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'PongConsumer': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}


# LOGGING = {
#     "version": 1,
#     "disable_existing_loggers": False,
#     "handlers": {
#         "console": {
#             "class": "logging.StreamHandler",
#         },
#     },
#     "root": {
#         "handlers": ["console"],
#         "level": "DEBUG",
#     },
# }

# LOGGING = {
#     "version": 1,
#     "disable_existing_loggers": True,  # Désactive tous les autres logs
#     "handlers": {
#         "console": {
#             "class": "logging.StreamHandler",
#         },
#     },
#     "loggers": {
#         "django.custom": {  # Seul notre logger personnalisé est actif
#             "handlers": ["console"],
#             "level": "INFO",
#             "propagate": False,
#         },
#     },
# }
